We start with a set of witnesses, that need to be compared
Each witness is tokenized (split into seperate words), so each witness can be seen as a sequence of words.
From the set of witnesses, we apply the algorithm to each pair:

- step a: determine the potential matches: 
  ( a potential match is a tuple [w1,w2] of Words, where w1 is a word from the first witness, and w2 is a word from the 2nd witness,
    and w1 and w2 are a match. )
  result: Set<Match> (the individual Words from the witnesses may be part of multiple Matches)

- step b: from this collection of potential matches, calculate all the possible permutations 
  ( each permutation being a set of potential matches, such that the words in the witnesses are a part of at most 1 potential match,
     and as many potential matches as possible are included in the set. )
  result: List<Set<Match>>, where in each Set<Match> each Word from the 2 witnesses is part of at most 1 Match 
  
for each permutation we take the following steps:   

- step 1: determine the match sequences
  result: List<MatchSequence>

- step 2: determine the real matches

- step 3: determine the transpositions
  result: List<Transposition>

- step 4: determine the gaps between the match sequences (from the real matches and the transpositions)

- step 5: analyse each gap to determine wheter it is an addition, ommission or replacement
